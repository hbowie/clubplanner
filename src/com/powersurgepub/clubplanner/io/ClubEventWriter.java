/*
 * Copyright 1999 - 2015 Herb Bowie
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.powersurgepub.clubplanner.io;

  import com.powersurgepub.clubplanner.model.*;
  import com.powersurgepub.psdatalib.clubplanner.*;
  import com.powersurgepub.psutils.*;
  import java.io.*;

/**
 Writer for ClubEvents.

 Generated by PSTextMerge using template master-writer.java.

 @author Herb Bowie
 */
public class ClubEventWriter {
 
  private     BufferedWriter      outBuffered;
 
  public static final String FILE_EXT = ".txt";
 
  public ClubEventWriter() {
 
  }
 
  /**
   Does the given Club Event already exist on disk?
 
   @param folder    The folder in which the item is to be stored.
   @param clubEvent The Club Event to be stored.
 
   @return True if a disk file with the same path already exists,
           false if not.
   */
  public boolean exists (File folder, ClubEvent clubEvent) {
    return getFile(folder, clubEvent).exists();
  }
 
  /**
   Does the given Club Event already exist on disk?
 
   @param folder    The folder in which the item is to be stored.
   @param localPath The local path (folder plus file name) for the
                    Club Event to be stored.
 
   @return True if a disk file with the same path already exists,
           false if not.
   */
  public boolean exists (File folder, String localPath) {
    return getFile(folder, localPath).exists();
  }
 
  /**
   Delete the passed event from disk.
 
   @param folder    The folder in which the item is to be stored.
   @param clubEvent The Club Event to be stored.
 
   @return True if the file was deleted successfully,
           false if not.
   */
  public boolean delete (File folder, ClubEvent clubEvent) {
    return getFile(folder, clubEvent).delete();
  }
 
  /**
   Delete the passed event from disk.
 
   @param folder    The folder in which the item is to be stored.
   @param localPath The local path (folder plus file name) for the
                    Club Event to be stored.
 
   @return True if the file was deleted successfully,
           false if not.
   */
  public boolean delete (File folder, String localPath) {
    return getFile(folder, localPath).delete();
  }
 
  /**
   Return a standard File object representing the item's stored location on disk.
 
   @param folder    The folder in which the item is to be stored.
   @param clubEvent The Club Event to be stored.
 
   @return The File pointing to the intended disk location for the given event.
   */
  public File getFile (File folder, ClubEvent clubEvent) {
    File localFolder;
    if (clubEvent.hasFolderName()) {
      localFolder = new File (folder, clubEvent.getFolderName());
    } else {
      localFolder = folder;
    }
    return new File (localFolder, clubEvent.getFileName() + FILE_EXT);
  }
 
  /**
   Return a standard File object representing the item's stored location on disk.
 
   @param folder    The folder in which the item is to be stored.
   @param localPath The local path (folder plus file name) for the
                    Club Event to be stored.
 
   @return The File pointing to the intended disk location for the given item.
   */
  public File getFile (File folder, String localPath) {
    StringBuilder completePath = new StringBuilder();
    try {
      completePath = new StringBuilder (folder.getCanonicalPath());
    } catch (Exception e) {
      completePath = new StringBuilder (folder.getAbsolutePath());
    }
    completePath.append('/');
    completePath.append(localPath);
    completePath.append(FILE_EXT);
    return new File (completePath.toString());
  }
 
  /**
   Save an entire list of events to disk. 
  
   @param folder           The destination folder. 
   @param clubEventList    The list to be saved. 
   @param primaryLocation  Is this the primary disk location for the events?
   @param adjustForNewYear Are we rolling over to a new year? 
  
   @return True if everything went OK. 
  */
  public boolean save (File folder, ClubEventList clubEventList,
      boolean primaryLocation, boolean adjustForNewYear) {
 
    boolean outOK = true;
    for (int i = 0; i < clubEventList.size() && outOK; i++) {
      ClubEvent nextClubEvent = clubEventList.get(i);
 
      if ((! primaryLocation)
          && (adjustForNewYear)
          && (nextClubEvent.getTags().tagFound("Discards"))) {
            // Drop any discards when starting a new year
      } else {
        outOK = save (folder, nextClubEvent, primaryLocation, adjustForNewYear);
      }
    }
    return outOK;
  }
 
  /**
   Save one event to disk. 
  
   @param folder           The destination folder. 
   @param clubEvent        The event to be saved. 
   @param primaryLocation  Is this the primary disk location for the event? 
   @param adjustForNewYear Are we rolling over to a new year?
  
   @return True if everything went OK. 
  */
  public boolean save (File folder, ClubEvent clubEvent,
      boolean primaryLocation, boolean adjustForNewYear) {
 
    boolean outOK = true;
 
    if ((! primaryLocation) && (adjustForNewYear)) {
      clubEvent.getTags().replace("Archive", "Current");
      clubEvent.getTags().replace("Next Year", "Current");
      clubEvent.setPriorYrActExp(clubEvent.getActualExpense());
      clubEvent.setPriorYrActInc(clubEvent.getActualIncome());
      clubEvent.setPriorYrPlnExp(clubEvent.getPlannedExpense());
      clubEvent.setPriorYrPlnInc(clubEvent.getPlannedIncome());
      clubEvent.setActualExpense("");
      clubEvent.setActualIncome("");
      clubEvent.setPlannedExpense("");
      clubEvent.setPlannedIncome("");
    }
 
 
    File categoryFolder = new File (folder, clubEvent.getCategoryAsString());
    if (! categoryFolder.exists()) {
      categoryFolder.mkdir();
    }
    File file = new File (categoryFolder, clubEvent.getFileName() + FILE_EXT);
    outOK = openOutput (file);
    if (outOK) {
      String oldDiskLocation = clubEvent.getDiskLocation();
      outOK = saveOneItem (clubEvent);
    }
    if (outOK && primaryLocation) {
      clubEvent.setDiskLocation (file);
    }
    if (outOK) {
      closeOutput();
    }
 
    return outOK;
  }
 
  /**
   Open the output writer.
 
   @param outFile The file to be opened.
 
   @return True if open worked ok.
  */
  private boolean openOutput (File outFile) {

    boolean outOK = true;
    try {
      FileOutputStream outStream = new FileOutputStream (outFile);
      OutputStreamWriter outWriter = new OutputStreamWriter (outStream, "UTF-8");
      outBuffered = new BufferedWriter (outWriter);
    } catch (IOException e) {
      outOK = false;
      Trouble.getShared().report
          ("File "+ outFile.toString() + " could not be opened for output",
              "File Save Error");
    }
    return outOK;
  }
 
  private boolean saveOneItem (ClubEvent clubEvent) {
    boolean outOK = true;
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.ITEM_TYPE_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getItemTypeAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.FLAGS_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getFlagsAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.WHEN_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getWhenAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.WHAT_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getWhatAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.WHERE_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getWhereAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.WHO_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getWhoAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.DISCUSS_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getDiscussAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.ACTIONS_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getActionsAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.WHY_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getWhyAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.TEASER_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getTeaserAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.BLURB_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getBlurbAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.COST_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getCostAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.PURCHASE_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getPurchaseAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.TICKETS_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getTicketsAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.QUANTITY_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getQuantityAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.PLANNED_INCOME_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getPlannedIncomeAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.ACTUAL_INCOME_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getActualIncomeAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.PLANNED_EXPENSE_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getPlannedExpenseAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.ACTUAL_EXPENSE_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getActualExpenseAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.PLANNED_ATTENDANCE_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getPlannedAttendanceAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.ACTUAL_ATTENDANCE_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getActualAttendanceAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.RECAP_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getRecapAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.ID_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getIdAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.LINK_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getLinkAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.VENUE_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getVenueAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.IMAGE_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getImageAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.NEWS_IMAGE_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getNewsImageAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.NOTES_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getNotesAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.PRIOR_YR_PLN_INC_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getPriorYrPlnIncAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.PRIOR_YR_ACT_INC_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getPriorYrActIncAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.PRIOR_YR_PLN_EXP_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getPriorYrPlnExpAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.PRIOR_YR_ACT_EXP_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getPriorYrActExpAsString());
    }
    if (outOK) {
      outOK = writeFieldName
          (ClubEvent.STATE_FIELD_NAME);
    }
    if (outOK) {
      outOK = writeFieldValue
          (clubEvent.getStateAsString());
    }
    return outOK;
  }
 
  private boolean writeFieldName (String fieldName) {
    boolean outOK = true;
    outOK = write(fieldName);
    if (outOK) {
      outOK = write(": ");
    }
    for (int i = fieldName.length(); i < 6 && outOK; i++) {
      outOK = write (" ");
    }
    return outOK;
  }
 
  private boolean writeFieldValue (String fieldValue) {
    return writeLine (fieldValue);
  }
 
  private boolean writeLine (String s) {
    try {
      outBuffered.write (s);
      outBuffered.newLine();
    } catch (IOException e) {
      return false;
    }
    return true;
  }
 
  private boolean write (String s) {
    try {
      outBuffered.write (s);
    } catch (IOException e) {
      return false;
    }
    return true;
  }
 
  /**
   Close the output writer.
 
   @return True if close worked ok.
  */
  public boolean closeOutput() {
    boolean outOK = true;
    try {
      outBuffered.close();
    } catch (IOException e) {
      outOK = false;
    }
    return outOK;
  }

}
