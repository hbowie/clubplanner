<?nextrec?>
<?definegroup 1 =$itemclass$=?>
<?ifendgroup 1 ?>
<?if =$itemtype$= = "Master" ?>
<?if =$folderfield$= ?>
<?else?>
  /**
   Since this item does not have a folder field defined, always return true,
   to prevent throwing an error.
   
   @return True.
   */
  public boolean hasFolderName() {
    return true;
  }
  
  /**
   Return an empty string, since this item has no folder name field defined. 
   
   @return An Empty string.
   */
  public String getFolderName() {
    return "";
  }
<?endif>
<?if =$filefield$= ?>
<?else?>
  /**
   Since this item does not have a file name field defined, always return true,
   to prevent throwing an error.
   
   @return True.
   */
  public boolean hasFileName() {
    return true;
  }
  
  /**
   Return an empty string, since this item has no file name field defined. 
   
   @return An empty string.
   */
  public String getFileName() {
    return "";
  }
<?endif>
<?endif?>
<?endif?>
<?ifnewgroup 1 ?>
<?set folderfield = "" ?>
<?set filefield = "" ?>
<?if =$itemtype$= = "Master" ?>
<?output "../includes/=$itemclass$=-io-methods.java"?>

  /* 
   Following code generated by PSTextMerge using: 
   
     template:  =$templatefilename$=
     data file: =$datafilename$=
   */
  
  /**
   Determine if this item has a local path.

   @return True if this item has a local path.
   */
  public boolean hasLocalPath () {

    return (hasFolderName() && hasFileName());
  }

  /**
   Return the local path identifying the disk location of this item. 
   
   @return the folder name plus the file name, without any file extension. 
   */
   public String getLocalPath() {
     return getFolderName() + getFileName();
   }
<?endif?>
<?endif?>
<?if =$itemtype$= = "Master" ?>
<?if =$foldername$= ?>
  /**
   Does the item have a valid folder name?
   
   @return True if the folder name field for this item is neither null nor blank. 
   */
  public boolean hasFolderName() {
		if (get=$field&cuul$=() == null) {
			return false;
		}
		else
		if (get=$field&cuul$=().toString().length() == 0) {
			return false;
		} else {
			return true;
		}
	}
	
	/**
	 Return the name of the folder in which this item should be stored. 
	 
	 @return The folder name to be used, followed by a slash, or an empty
	         string, if the folder name field is blank or null.
	 */
	public String getFolderName() {
		if (get=$field&cuul$=() == null) {
			return "";
		}
		else
		if (get=$field&cuul$=().toString().length() == 0) {
			return "";
		} else {
			return StringUtils.makeReadableFileName (get=$field&cuul$=().toString()) + "/";
		}
	}
<?set folderfield = =$field$= ?>
<?endif?>
<?if =$filename$= ?>
  /**
   Does the item have a valid file name?
   
   @return True if the file name field for this item is neither null nor blank. 
   */
  public boolean hasFileName() {
		if (get=$field&cuul$=() == null) {
			return false;
		}
		else
		if (get=$field&cuul$=().toString().length() == 0) {
			return false;
		} else {
			return true;
		}
	}
	
	/**
	 Return the file name in which this item should be stored. 
	 
	 @return The file name to be used, without a file extension.
	 */
	public String getFileName() {
		if (get=$field&cuul$=() == null) {
			return "";
		}
		else
		if (get=$field&cuul$=().toString().length() == 0) {
			return "";
		} else {
			return StringUtils.makeReadableFileName (get=$field&cuul$=().toString());
		}
	}
<?set filefield = =$field$= ?>
<?endif?>
<?endif?>
<?loop?>
