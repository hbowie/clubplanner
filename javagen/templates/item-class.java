<?nextrec?>
<?definegroup 1 =$itemclass$=?>
<?ifendgroup 1 ?>
<?ifnewgroup 1 ?>
<?output "../../src/com/powersurgepub/clubplanner/model/=$itemclass$=.java"?>
package com.powersurgepub.clubplanner.model;

  import com.powersurgepub.psdatalib.psdata.*;
  import com.powersurgepub.psdatalib.pstags.*;  
  import com.powersurgepub.psutils.*;
  import java.io.*;
  import java.math.*;
  import java.util.*;
  
  /* 
   This item class definition generated by PSTextMerge using: 
   
     template:  =$templatefilename$=
     data file: =$datafilename$=
   */
  

/**
 A single event, or other item to be tracked by the club.

 @author Herb Bowie
 */
public class =$itemclass$= 
<?include "../includes/=$itemclass$=-taggable-implements.java"?>
			 {

  private static final RecordDefinition recDef;

<?include "../includes/=$itemclass$=-variable-definitions.java"?>

<?include "../includes/=$itemclass$=-master-detail-definitions.java"?>

  private boolean modified = false;
  
  private String  diskLocation = "";

  /**
   Static initializer.
   */
  static {
    DataDictionary dict = new DataDictionary();
    recDef = new RecordDefinition (dict);
    for (int i = 0; i < COLUMN_COUNT; i++) {
      recDef.addColumn (getColumnName(i));
    }
  }

  /**
   A constructor without any arguments.
   */
  public =$itemclass$=() {

  }
  
  public void resetModified() {
    setModified (false);
  }
  
  public void setModified (boolean modified) {
    this.modified = modified;
  }
  
  public boolean isModified() {
    return modified;
  }
  
  /**
   Set the disk location at which this item is stored. 
  
   @param diskLocation The path to the disk location at which this item 
                       is stored. 
  */
  public void setDiskLocation (String diskLocation) {
    this.diskLocation = diskLocation;
  }
  
  /**
   Set the disk location at which this item is stored.
  
   @param diskLocationFile The disk location at which this item is stored.  
  */
  public void setDiskLocation (File diskLocationFile) {
    try {
      this.diskLocation = diskLocationFile.getCanonicalPath();
    } catch (java.io.IOException e) {
      this.diskLocation = diskLocationFile.getAbsolutePath();
    }
  }
  
  /**
   Return the disk location at which this item is stored. 
  
   @return The disk location at which this item is stored.  
  */
  public String getDiskLocation () {
    return diskLocation;
  }
  
  /**
   Find a common name (no punctuation, all lower-case) that starts with 
   the passed string, if one exists. 
  
   @param possibleFieldName The potential field name we're looking for. This
                            will be converted to a common name before it's
                            compared to the common forms of the field names. 
  
   @return The index pointing to the first matching common name that was found,
           or -1 if no match was found. 
  */
  public static int commonNameStartsWith (String possibleFieldName) {
    int i = 0;
    boolean fieldMatch = false;
    String possibleCommonName = StringUtils.commonName (possibleFieldName);
    while (i < COLUMN_COUNT && (! fieldMatch)) {
      if (getCommonName(i).startsWith(possibleCommonName)) {
        fieldMatch = true;
      } else {
        i++;
      }
    } // end while looking for field name match
    if (fieldMatch) {
      return i;
    } else {
      return -1;
    }
  }

  /**
   Return a record definition for the ClubEvent.
  
   @return A record definition using a new dictionary. 
  */
  public static RecordDefinition getRecDef() {
    return recDef;
  }
  
  /**
   Return a standard data rec using the variables belonging to this object.
 
   @return A generic data record.
  */
  public DataRecord getDataRec() {
    DataRecord dataRec = new DataRecord();
    for (int i = 0; i < COLUMN_COUNT; i++) {
      Object columnValue = getColumnValue(i);
      String columnValueStr = "";
      if (columnValue != null) {
        columnValueStr = columnValue.toString();
      }
      int dataRecFieldNumber = dataRec.addField(recDef, columnValueStr);
    }
    return dataRec;
  }
  
<?include "../includes/=$itemclass$=-haskey-method.java"?>
<?include "../includes/=$itemclass$=-find.java"?>
<?include "../includes/=$itemclass$=-toString.java"?>
<?include "../includes/=$itemclass$=-merge.java"?>
<?include "../includes/=$itemclass$=-compare-methods.java"?>
<?include "../includes/=$itemclass$=-setColumnValue.java"?>  
<?include "../includes/=$itemclass$=-getColumnValue.java"?>
<?include "../includes/=$itemclass$=-getColumnName.java"?>
<?include "../includes/=$itemclass$=-getCommonName.java"?>
<?include "../includes/=$itemclass$=-getColumnWidth.java"?>
<?include "../includes/=$itemclass$=-getColumnClass.java"?>
<?include "../includes/=$itemclass$=-isMarkdownFormat.java"?>
<?include "../includes/=$itemclass$=-variable-methods.java"?>
<?include "../includes/=$itemclass$=-taggable-methods.java"?>
<?include "../includes/=$itemclass$=-master-detail-methods.java"?>

}
<?endif?>
<?loop?>
