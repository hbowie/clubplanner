/*
 * Copyright 2012 - 2013 Herb Bowie
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.powersurgepub.clubplanner.view;

  import com.powersurgepub.clubplanner.*;
  import com.powersurgepub.clubplanner.model.*;
  import com.powersurgepub.linktweaker.*;
  import com.powersurgepub.psdatalib.clubplanner.*;
  import com.powersurgepub.psdatalib.ui.*;
  import java.awt.*;
  import java.util.*;
  import javax.swing.*;
 
/**
 A panel displaying some of an item's fields, and allowing the user to modify those fields. <p>
 
 Generated by PSTextMerge using item-panel.java.

 @author Herb Bowie
 */
public class EventTransactionPanel1
		extends
			JPanel
		implements
			DateOwner {
	

  /*
   Following code generated by PSTextMerge using:
 
     template:  item-panel-definitions.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  private JLabel    dateLabel    = new JLabel("Date:", JLabel.LEFT);
  private JTextField dateJTextField = new JTextField();
  private JLabel    incomeExpenseLabel    = new JLabel("Income/Expense:", JLabel.LEFT);
  private PSComboBox incomeExpensePSComboBox = new PSComboBox();
  private JLabel    fromToLabel    = new JLabel("From/To:", JLabel.LEFT);
  private JTextField fromToJTextField = new JTextField();
  private JLabel    paidForLabel    = new JLabel("Paid For:", JLabel.LEFT);
  private JScrollPane paidForScrollPane = new javax.swing.JScrollPane();
  private JTextArea paidForJTextArea = new JTextArea();
  private JLabel    amountLabel    = new JLabel("Amount:", JLabel.LEFT);
  private JScrollPane amountScrollPane = new javax.swing.JScrollPane();
  private JTextArea amountJTextArea = new JTextArea();

  private     JLabel              bottomFiller   = new JLabel("");

  private     boolean             modified = false;

	private     GridBagger          gb = new GridBagger();
	
	private     JFrame              frame;
	
	private     LinkTweaker         linkTweaker = null;

  /**
   The constructor.
   */
  public EventTransactionPanel1(JFrame frame, LinkTweaker linkTweaker) {
 
    this.frame = frame;
    this.linkTweaker = linkTweaker;
    gb.startLayout (this, 4, 99);
    gb.setByRows(true);
		gb.setDefaultColumnWeight (0.5);
		gb.setDefaultRowWeight (0.0);
		gb.setAllInsets (4);
    gb.setFill(GridBagConstraints.HORIZONTAL);
    gb.setAnchor(GridBagConstraints.NORTHWEST);


  /*
   Following code generated by PSTextMerge using:
 
     template:  item-panel-layout.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 

		// Panel Layout for Date
    dateLabel.setLabelFor(dateJTextField);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(dateLabel);
    dateJTextField.setToolTipText("The date of the financial transaction.");
    gb.setWidth(1);
    gb.setTopInset(4);
    gb.add(dateJTextField);

		// Panel Layout for Income/Expense
    incomeExpenseLabel.setLabelFor(incomeExpensePSComboBox);
    incomeExpensePSComboBox.load (EventTransaction.class, "incomeexpense.txt");
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(incomeExpenseLabel);
    incomeExpensePSComboBox.setToolTipText("Is this income or expense?");
    gb.setWidth(1);
    gb.setTopInset(4);
    gb.add(incomeExpensePSComboBox);

		// Panel Layout for From/To
    fromToLabel.setLabelFor(fromToJTextField);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(fromToLabel);
    fromToJTextField.setToolTipText("Who did we receive money from, or pay money to?");
    gb.setWidth(3);
    gb.setTopInset(4);
    gb.add(fromToJTextField);

		// Panel Layout for Paid For
    paidForLabel.setLabelFor(paidForJTextArea);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(paidForLabel);
    paidForJTextArea.setColumns(20);
    paidForJTextArea.setLineWrap(true);
    paidForJTextArea.setRows(3);
    paidForJTextArea.setWrapStyleWord(true);
    paidForJTextArea.setToolTipText("What did we pay for, or receive money for?");
    paidForScrollPane.setViewportView(paidForJTextArea);
    gb.setWidth(3);
    gb.setTopInset(4);
    gb.add(paidForScrollPane);

		// Panel Layout for Amount
    amountLabel.setLabelFor(amountJTextArea);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(amountLabel);
    amountJTextArea.setColumns(20);
    amountJTextArea.setLineWrap(true);
    amountJTextArea.setRows(3);
    amountJTextArea.setWrapStyleWord(true);
    amountJTextArea.setToolTipText("The amount of the transaction.");
    amountScrollPane.setViewportView(amountJTextArea);
    gb.setWidth(3);
    gb.setTopInset(4);
    gb.add(amountScrollPane);

    gb.setWidth(4);
    gb.setFill(GridBagConstraints.BOTH);
    gb.setColumnWeight(1.0);
    gb.setRowWeight(1.0);
    gb.add(bottomFiller);
 
  }
 

  /*
   Following code generated by PSTextMerge using:
 
     template:  item-panel-display.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
  public void display (EventTransaction eventTransaction) {
 
    modified = false;
 
    if (eventTransaction.hasDate()) {
      dateJTextField.setText (eventTransaction.getDate().toString());
    } else {
      dateJTextField.setText ("");
    }
    if (eventTransaction.hasIncomeExpense()) {
      incomeExpensePSComboBox.setText (eventTransaction.getIncomeExpense().toString());
    } else {
      incomeExpensePSComboBox.setText ("");
    }
    if (eventTransaction.hasFromTo()) {
      fromToJTextField.setText (eventTransaction.getFromTo().toString());
    } else {
      fromToJTextField.setText ("");
    }
    if (eventTransaction.hasPaidFor()) {
      paidForJTextArea.setText (eventTransaction.getPaidFor().toString());
    } else {
      paidForJTextArea.setText ("");
    }
    paidForJTextArea.setCaretPosition(0);
    if (eventTransaction.hasAmount()) {
      amountJTextArea.setText (eventTransaction.getAmount().toString());
    } else {
      amountJTextArea.setText ("");
    }
    amountJTextArea.setCaretPosition(0);
 
  }


  /*
   Following code generated by PSTextMerge using:
 
     template:  item-panel-mod.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  public boolean modIfChanged (EventTransaction eventTransaction) {
 

    if (! eventTransaction.getDateAsString().equals (dateJTextField.getText())) {
      eventTransaction.setDate(dateJTextField.getText());
      modified = true;
    }

    if (! eventTransaction.getIncomeExpenseAsString().equals (incomeExpensePSComboBox.getText())) {
      eventTransaction.setIncomeExpense(incomeExpensePSComboBox.getText());
      modified = true;
    }

    if (! eventTransaction.getFromToAsString().equals (fromToJTextField.getText())) {
      eventTransaction.setFromTo(fromToJTextField.getText());
      modified = true;
    }

    if (! eventTransaction.getPaidForAsString().equals (paidForJTextArea.getText())) {
      eventTransaction.setPaidFor(paidForJTextArea.getText());
      modified = true;
    }

    if (! eventTransaction.getAmountAsString().equals (amountJTextArea.getText())) {
      eventTransaction.setAmount(amountJTextArea.getText());
      modified = true;
    }

    return modified;
 
  }


  /*
   Following code generated by PSTextMerge using:
 
     template:  item-panel-get.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 

  /**
    Returns the date for this event transaction.
 
    @return The date for this event transaction.
   */
  public JTextField getDateJTextField () {
    return dateJTextField;
  }

  /**
    Returns the income expense for this event transaction.
 
    @return The income expense for this event transaction.
   */
  public PSComboBox getIncomeExpensePSComboBox () {
    return incomeExpensePSComboBox;
  }

  /**
    Returns the from to for this event transaction.
 
    @return The from to for this event transaction.
   */
  public JTextField getFromToJTextField () {
    return fromToJTextField;
  }

  /**
    Returns the paid for for this event transaction.
 
    @return The paid for for this event transaction.
   */
  public JTextArea getPaidForJTextArea () {
    return paidForJTextArea;
  }

  /**
    Returns the amount for this event transaction.
 
    @return The amount for this event transaction.
   */
  public JTextArea getAmountJTextArea () {
    return amountJTextArea;
  }


  /**
   Set a link field to a new value after it has been tweaked.
 
   This method generated by PSTextMerge using:
 
     template:  item-panel-tweak.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
 
   @param tweakedLink The link after it has been tweaked.
   @param linkID      A string identifying the link, in case there are more
                      than one. This would be the text used in the label
                      for the link.
  */
  public void setTweakedLink (String tweakedLink, String linkID) {
  }

  /**
   To be called whenever the date is modified by DatePanel.
   */
  public void dateModified (Date date) {
 
  }
 
  /**
   Does this date have an associated rule for recurrence?
   */
  public boolean canRecur() {
    return false;
	}
 
  /**
   Provide a text string describing the recurrence rule, that can
   be used as a tool tip.
   */
  public String getRecurrenceRule() {
    return "";
  }
 
  /**
   Apply the recurrence rule to the date.
 
   @param date Date that will be incremented.
   */
  public void recur (GregorianCalendar date) {
 
  }

}
