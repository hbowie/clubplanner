package com.powersurgepub.clubplanner.view;

  import com.powersurgepub.clubplanner.*;
  import com.powersurgepub.clubplanner.model.*;
  import com.powersurgepub.psdatalib.clubplanner.*;
  import com.powersurgepub.psdatalib.ui.*;
  import java.awt.*;
  import java.util.*;
  import javax.swing.*;
 
/**
 A panel displaying some of an item's fields, and allowing the user to modify those fields.
 
 Generated by PSTextMerge using item-panel.java.

 @author Herb Bowie
 */
public class ClubEventPanel3
		extends
			JPanel
		implements
			DateOwner {
	

  /*
   Following code generated by PSTextMerge using:
 
     template:  item-panel-definitions.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 

  private JLabel    costLabel    = new JLabel("Cost:", JLabel.LEFT);
  private JTextField costJTextField = new JTextField();

  private JLabel    purchaseLabel    = new JLabel("Purchase:", JLabel.LEFT);
  private JTextField purchaseJTextField = new JTextField();

  private JLabel    ticketsLabel    = new JLabel("Tickets:", JLabel.LEFT);
  private JTextField ticketsJTextField = new JTextField();

  private JLabel    quantityLabel    = new JLabel("Quantity:", JLabel.LEFT);
  private JTextField quantityJTextField = new JTextField();

  private JLabel    plannedIncomeLabel    = new JLabel("Planned Income:", JLabel.LEFT);
  private JTextField plannedIncomeJTextField = new JTextField();

  private JLabel    actualIncomeLabel    = new JLabel("Actual Income:", JLabel.LEFT);
  private JTextField actualIncomeJTextField = new JTextField();

  private JLabel    plannedExpenseLabel    = new JLabel("Planned Expense:", JLabel.LEFT);
  private JTextField plannedExpenseJTextField = new JTextField();

  private JLabel    actualExpenseLabel    = new JLabel("Actual Expense:", JLabel.LEFT);
  private JTextField actualExpenseJTextField = new JTextField();

  private JLabel    plannedAttendanceLabel    = new JLabel("Planned Attendance:", JLabel.LEFT);
  private JTextField plannedAttendanceJTextField = new JTextField();

  private JLabel    actualAttendanceLabel    = new JLabel("Actual Attendance:", JLabel.LEFT);
  private JTextField actualAttendanceJTextField = new JTextField();

  private     JLabel              bottomFiller   = new JLabel("");

  private     boolean             modified = false;

	private     GridBagger          gb = new GridBagger();
	
	private     JFrame              frame;

  /**
   The constructor.
   */
  public ClubEventPanel3(JFrame frame) {
 
    this.frame = frame;
    gb.startLayout (this, 4, 99);
    gb.setByRows(true);
		gb.setDefaultColumnWeight (0.5);
		gb.setDefaultRowWeight (0.0);
		gb.setAllInsets (4);
    gb.setFill(GridBagConstraints.HORIZONTAL);
    gb.setAnchor(GridBagConstraints.NORTHWEST);


  /*
   Following code generated by PSTextMerge using:
 
     template:  item-panel-layout.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 

		// Panel Layout for Cost
    costLabel.setLabelFor(costJTextField);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(costLabel);
    costJTextField.setToolTipText("The cost per person to attend the event. If the event is free, then leave this field blank.");
    gb.setWidth(3);
    gb.setTopInset(4);
    gb.add(costJTextField);

		// Panel Layout for Purchase
    purchaseLabel.setLabelFor(purchaseJTextField);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(purchaseLabel);
    purchaseJTextField.setToolTipText("Instructions on how to purchase tickets to the event, if any.");
    gb.setWidth(3);
    gb.setTopInset(4);
    gb.add(purchaseJTextField);

		// Panel Layout for Tickets
    ticketsLabel.setLabelFor(ticketsJTextField);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(ticketsLabel);
    ticketsJTextField.setToolTipText("For purchasers, information on how they are to receive the tickets.");
    gb.setWidth(3);
    gb.setTopInset(4);
    gb.add(ticketsJTextField);

		// Panel Layout for Quantity
    quantityLabel.setLabelFor(quantityJTextField);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(quantityLabel);
    quantityJTextField.setToolTipText("Number of seats or tickets available for the event; maximum number of attendees.");
    gb.setWidth(3);
    gb.setTopInset(4);
    gb.add(quantityJTextField);

		// Panel Layout for Planned Income
    plannedIncomeLabel.setLabelFor(plannedIncomeJTextField);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(plannedIncomeLabel);
    plannedIncomeJTextField.setToolTipText("The amount of money we have planned to receive for the event. Simple calculations are supported, such as $20 x 40.");
    gb.setWidth(1);
    gb.setTopInset(4);
    gb.add(plannedIncomeJTextField);

		// Panel Layout for Actual Income
    actualIncomeLabel.setLabelFor(actualIncomeJTextField);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(actualIncomeLabel);
    actualIncomeJTextField.setToolTipText("Our actual income for the event.");
    gb.setWidth(1);
    gb.setTopInset(4);
    gb.add(actualIncomeJTextField);

		// Panel Layout for Planned Expense
    plannedExpenseLabel.setLabelFor(plannedExpenseJTextField);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(plannedExpenseLabel);
    plannedExpenseJTextField.setToolTipText("The amount of money we have planned/budgeted to be spent on the event.");
    gb.setWidth(1);
    gb.setTopInset(4);
    gb.add(plannedExpenseJTextField);

		// Panel Layout for Actual Expense
    actualExpenseLabel.setLabelFor(actualExpenseJTextField);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(actualExpenseLabel);
    actualExpenseJTextField.setToolTipText("Our actual expenses for the event.");
    gb.setWidth(1);
    gb.setTopInset(4);
    gb.add(actualExpenseJTextField);

		// Panel Layout for Planned Attendance
    plannedAttendanceLabel.setLabelFor(plannedAttendanceJTextField);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(plannedAttendanceLabel);
    plannedAttendanceJTextField.setToolTipText("The number of attendees built into our planning assumptions.");
    gb.setWidth(1);
    gb.setTopInset(4);
    gb.add(plannedAttendanceJTextField);

		// Panel Layout for Actual Attendance
    actualAttendanceLabel.setLabelFor(actualAttendanceJTextField);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(actualAttendanceLabel);
    actualAttendanceJTextField.setToolTipText("The actual number of people who attended the event.");
    gb.setWidth(1);
    gb.setTopInset(4);
    gb.add(actualAttendanceJTextField);

    gb.setWidth(2);
    gb.setFill(GridBagConstraints.BOTH);
    gb.setColumnWeight(1.0);
    gb.setRowWeight(0.1);
    gb.add(bottomFiller);
 
  }
 

  /*
   Following code generated by PSTextMerge using:
 
     template:  item-panel-display.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
  public void display (ClubEvent clubEvent) {
 
    modified = false;
 
    if (clubEvent.hasCost()) {
      costJTextField.setText (clubEvent.getCost().toString());
    } else {
      costJTextField.setText ("");
    }
    if (clubEvent.hasPurchase()) {
      purchaseJTextField.setText (clubEvent.getPurchase().toString());
    } else {
      purchaseJTextField.setText ("");
    }
    if (clubEvent.hasTickets()) {
      ticketsJTextField.setText (clubEvent.getTickets().toString());
    } else {
      ticketsJTextField.setText ("");
    }
    if (clubEvent.hasQuantity()) {
      quantityJTextField.setText (clubEvent.getQuantity().toString());
    } else {
      quantityJTextField.setText ("");
    }
    if (clubEvent.hasPlannedIncome()) {
      plannedIncomeJTextField.setText (clubEvent.getPlannedIncome().toString());
    } else {
      plannedIncomeJTextField.setText ("");
    }
    if (clubEvent.hasActualIncome()) {
      actualIncomeJTextField.setText (clubEvent.getActualIncome().toString());
    } else {
      actualIncomeJTextField.setText ("");
    }
    if (clubEvent.hasPlannedExpense()) {
      plannedExpenseJTextField.setText (clubEvent.getPlannedExpense().toString());
    } else {
      plannedExpenseJTextField.setText ("");
    }
    if (clubEvent.hasActualExpense()) {
      actualExpenseJTextField.setText (clubEvent.getActualExpense().toString());
    } else {
      actualExpenseJTextField.setText ("");
    }
    if (clubEvent.hasPlannedAttendance()) {
      plannedAttendanceJTextField.setText (clubEvent.getPlannedAttendance().toString());
    } else {
      plannedAttendanceJTextField.setText ("");
    }
    if (clubEvent.hasActualAttendance()) {
      actualAttendanceJTextField.setText (clubEvent.getActualAttendance().toString());
    } else {
      actualAttendanceJTextField.setText ("");
    }
 
  }


  /*
   Following code generated by PSTextMerge using:
 
     template:  item-panel-mod.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  public boolean modIfChanged (ClubEvent clubEvent) {
 
    if (! clubEvent.getCostAsString().equals (costJTextField.getText())) {
      clubEvent.setCost(costJTextField.getText());
      modified = true;
    }
    if (! clubEvent.getPurchaseAsString().equals (purchaseJTextField.getText())) {
      clubEvent.setPurchase(purchaseJTextField.getText());
      modified = true;
    }
    if (! clubEvent.getTicketsAsString().equals (ticketsJTextField.getText())) {
      clubEvent.setTickets(ticketsJTextField.getText());
      modified = true;
    }
    if (! clubEvent.getQuantityAsString().equals (quantityJTextField.getText())) {
      clubEvent.setQuantity(quantityJTextField.getText());
      modified = true;
    }
    if (! clubEvent.getPlannedIncomeAsString().equals (plannedIncomeJTextField.getText())) {
      clubEvent.setPlannedIncome(plannedIncomeJTextField.getText());
      modified = true;
    }
    if (! clubEvent.getActualIncomeAsString().equals (actualIncomeJTextField.getText())) {
      clubEvent.setActualIncome(actualIncomeJTextField.getText());
      modified = true;
    }
    if (! clubEvent.getPlannedExpenseAsString().equals (plannedExpenseJTextField.getText())) {
      clubEvent.setPlannedExpense(plannedExpenseJTextField.getText());
      modified = true;
    }
    if (! clubEvent.getActualExpenseAsString().equals (actualExpenseJTextField.getText())) {
      clubEvent.setActualExpense(actualExpenseJTextField.getText());
      modified = true;
    }
    if (! clubEvent.getPlannedAttendanceAsString().equals (plannedAttendanceJTextField.getText())) {
      clubEvent.setPlannedAttendance(plannedAttendanceJTextField.getText());
      modified = true;
    }
    if (! clubEvent.getActualAttendanceAsString().equals (actualAttendanceJTextField.getText())) {
      clubEvent.setActualAttendance(actualAttendanceJTextField.getText());
      modified = true;
    }

    return modified;
 
  }


  /*
   Following code generated by PSTextMerge using:
 
     template:  item-panel-get.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 

  /**
    Returns the cost for this club event.
 
    @return The cost for this club event.
   */
  public JTextField getCostJTextField () {
    return costJTextField;
  }

  /**
    Returns the purchase for this club event.
 
    @return The purchase for this club event.
   */
  public JTextField getPurchaseJTextField () {
    return purchaseJTextField;
  }

  /**
    Returns the tickets for this club event.
 
    @return The tickets for this club event.
   */
  public JTextField getTicketsJTextField () {
    return ticketsJTextField;
  }

  /**
    Returns the quantity for this club event.
 
    @return The quantity for this club event.
   */
  public JTextField getQuantityJTextField () {
    return quantityJTextField;
  }

  /**
    Returns the planned income for this club event.
 
    @return The planned income for this club event.
   */
  public JTextField getPlannedIncomeJTextField () {
    return plannedIncomeJTextField;
  }

  /**
    Returns the actual income for this club event.
 
    @return The actual income for this club event.
   */
  public JTextField getActualIncomeJTextField () {
    return actualIncomeJTextField;
  }

  /**
    Returns the planned expense for this club event.
 
    @return The planned expense for this club event.
   */
  public JTextField getPlannedExpenseJTextField () {
    return plannedExpenseJTextField;
  }

  /**
    Returns the actual expense for this club event.
 
    @return The actual expense for this club event.
   */
  public JTextField getActualExpenseJTextField () {
    return actualExpenseJTextField;
  }

  /**
    Returns the planned attendance for this club event.
 
    @return The planned attendance for this club event.
   */
  public JTextField getPlannedAttendanceJTextField () {
    return plannedAttendanceJTextField;
  }

  /**
    Returns the actual attendance for this club event.
 
    @return The actual attendance for this club event.
   */
  public JTextField getActualAttendanceJTextField () {
    return actualAttendanceJTextField;
  }

  /**
   To be called whenever the date is modified by DatePanel.
   */
  public void dateModified (Date date) {
 
  }
 
  /**
   Does this date have an associated rule for recurrence?
   */
  public boolean canRecur() {
    return false;
	}
 
  /**
   Provide a text string describing the recurrence rule, that can
   be used as a tool tip.
   */
  public String getRecurrenceRule() {
    return "";
  }
 
  /**
   Apply the recurrence rule to the date.
 
   @param date Date that will be incremented.
   */
  public void recur (GregorianCalendar date) {
 
  }

}
