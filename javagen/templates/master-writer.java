<?nextrec?>
<?definegroup 1 =$itemclass$=?>
<?ifendgroup 1 ?>
<?if =$itemMaster$= = "Master" ?>
    return outOK;
  }
  
  private boolean writeFieldName (String fieldName) {
    boolean outOK = true;
    outOK = write(fieldName);
    if (outOK) {
      outOK = write(": ");
    }
    for (int i = fieldName.length(); i < 6 && outOK; i++) {
      outOK = write (" ");
    }
    return outOK;
  }
  
  private boolean writeFieldValue (String fieldValue) {
    return writeLine (fieldValue);
  }
  
  private boolean writeLine (String s) {
    try {
      outBuffered.write (s);
      outBuffered.newLine();
    } catch (IOException e) {
      return false;
    }
    return true;
  }
  
  private boolean write (String s) {
    try {
      outBuffered.write (s);
    } catch (IOException e) {
      return false;
    }
    return true;
  }
  
  /**
   Close the output writer. 
  
   @return True if close worked ok.  
  */
  public boolean closeOutput() {
    boolean outOK = true;
    try {
      outBuffered.close();
    } catch (IOException e) {
      outOK = false;
    }
    return outOK;
  }

}
<?endif?>
<?ifnewgroup 1 ?>
<?set itemMaster = =$itemtype$= ?>
<?if =$itemtype$= == "Master" ?>
<?output "../../src/com/powersurgepub/clubplanner/io/=$itemclass$=Writer.java"?>
package com.powersurgepub.clubplanner.io;

  import com.powersurgepub.clubplanner.model.*;
  import com.powersurgepub.psutils.*;
  import java.io.*;

/**
 Writer for =$itemclass$=s. 

 Generated by PSTextMerge using template =$templatefilename$=.

 @author Herb Bowie
 */
public class =$itemclass$=Writer {
  
  private     BufferedWriter      outBuffered;
  
  public =$itemclass$=Writer() {
    
  }
  
  public boolean save (File folder, =$itemclass$=List =$itemclass&clul$=List, boolean primaryLocation) {
  
    boolean outOK = true;
    for (int i = 0; i < =$itemclass&clul$=List.size() && outOK; i++) {
      =$itemclass$= next=$itemclass$= = =$itemclass&clul$=List.get(i);
      outOK = save (folder, next=$itemclass$=, primaryLocation);
    }
    return outOK;
  }
  
  public boolean save (File folder, =$itemclass$= =$itemclass&clul$=, boolean primaryLocation) {
    
    boolean outOK = true;
    
    File statusFolder = new File (folder, clubEvent.getStatusAsString());
    if (! statusFolder.exists()) {
      statusFolder.mkdir();
    }
    File file = new File (statusFolder, clubEvent.getFileName() + ".txt");
    outOK = openOutput (file);
    if (outOK) {
      String oldDiskLocation = clubEvent.getDiskLocation();
      outOK = saveOneItem (clubEvent);
    }
    if (outOK && primaryLocation) {
      clubEvent.setDiskLocation (file);
    }
    if (outOK) {
      closeOutput();
    }
    
    return outOK;
  }
  
  /**
   Open the output writer. 
  
   @param outFile The file to be opened. 
  
   @return True if open worked ok. 
  */
  private boolean openOutput (File outFile) {

    boolean outOK = true;
    try {
      FileOutputStream outStream = new FileOutputStream (outFile);
      OutputStreamWriter outWriter = new OutputStreamWriter (outStream, "UTF-8");
      outBuffered = new BufferedWriter (outWriter);
    } catch (IOException e) {
      outOK = false;
      Trouble.getShared().report 
          ("File "+ outFile.toString() + " could not be opened for output", 
              "File Save Error");  
    }
    return outOK;
  }
  
  private boolean saveOneItem (ClubEvent clubEvent) {
    boolean outOK = true;
<?endif?>
<?endif?>
<?if =$itemtype$= == "Master" ?>
<?if =$calc$= == "" ?>
    if (outOK) {
      outOK = writeFieldName 
          (=$itemclass$=.=$field&c_uuu$=_FIELD_NAME); 
    }
    if (outOK) {
      outOK = writeFieldValue 
          (=$itemclass&clul$=.get=$field&cuul$=AsString());
    }
<?endif?>
<?endif?>
<?loop?>
