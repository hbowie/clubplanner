/*
 * Copyright 2012 - 2013 Herb Bowie
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.powersurgepub.clubplanner.view;

  import com.powersurgepub.clubplanner.*;
  import com.powersurgepub.clubplanner.model.*;
  import com.powersurgepub.linktweaker.*;
  import com.powersurgepub.psdatalib.clubplanner.*;
  import com.powersurgepub.psdatalib.psdata.*;
  import com.powersurgepub.psdatalib.psdata.values.*;
  import com.powersurgepub.psdatalib.psdata.widgets.*;
  import com.powersurgepub.psdatalib.ui.*;
  import java.awt.*;
  import java.util.*;
  import javax.swing.*;
 
/**
 A panel displaying some of an item's fields, and allowing the user to modify those fields. <p>
 
 Generated by PSTextMerge using item-panel.java.

 @author Herb Bowie
 */
public class ClubEventPanel3
		extends
			JPanel
		implements
			DateOwner {
	

  /*
   Following code generated by PSTextMerge using:
 
     template:  item-panel-definitions.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  private JLabel    costLabel    = new JLabel("Cost:", JLabel.LEFT);
  private JTextField costJTextField = new JTextField();
  private JLabel    ticketsLabel    = new JLabel("Tickets:", JLabel.LEFT);
  private JTextField ticketsJTextField = new JTextField();
  private JLabel    quantityLabel    = new JLabel("Quantity:", JLabel.LEFT);
  private JTextField quantityJTextField = new JTextField();
  private JLabel    plannedAttendanceLabel    = new JLabel("Planned Attendance:", JLabel.LEFT);
  private JTextField plannedAttendanceJTextField = new JTextField();
  private JLabel    actualAttendanceLabel    = new JLabel("Actual Attendance:", JLabel.LEFT);
  private JTextField actualAttendanceJTextField = new JTextField();
  private JLabel    plannedIncomeLabel    = new JLabel("Planned Income:", JLabel.LEFT);
  private JScrollPane plannedIncomeScrollPane = new javax.swing.JScrollPane();
  private JTextArea plannedIncomeJTextArea = new JTextArea();
  private JLabel    actualIncomeLabel    = new JLabel("Actual Income:", JLabel.LEFT);
  private JScrollPane actualIncomeScrollPane = new javax.swing.JScrollPane();
  private JTextArea actualIncomeJTextArea = new JTextArea();
  private JLabel    plannedExpenseLabel    = new JLabel("Planned Expense:", JLabel.LEFT);
  private JScrollPane plannedExpenseScrollPane = new javax.swing.JScrollPane();
  private JTextArea plannedExpenseJTextArea = new JTextArea();
  private JLabel    actualExpenseLabel    = new JLabel("Actual Expense:", JLabel.LEFT);
  private JScrollPane actualExpenseScrollPane = new javax.swing.JScrollPane();
  private JTextArea actualExpenseJTextArea = new JTextArea();
  private JLabel    overUnderLabel    = new JLabel("Over/Under:", JLabel.LEFT);
  private JLabel overUnderJLabel = new JLabel();
  private JLabel    financeProjectionLabel    = new JLabel("Finance Projection:", JLabel.LEFT);
  private JLabel financeProjectionJLabel = new JLabel();

  private     JLabel              bottomFiller   = new JLabel("");

  private     boolean             modified = false;

	private     GridBagger          gb = new GridBagger();
	
	private     JFrame              frame;
	
	private     LinkTweaker         linkTweaker = null;

  /**
   The constructor.
   */
  public ClubEventPanel3(JFrame frame, LinkTweaker linkTweaker) {
 
    this.frame = frame;
    this.linkTweaker = linkTweaker;
    gb.startLayout (this, 4, 99);
    gb.setByRows(true);
		gb.setDefaultColumnWeight (0.5);
		gb.setDefaultRowWeight (0.0);
		gb.setAllInsets (4);
    gb.setFill(GridBagConstraints.HORIZONTAL);
    gb.setAnchor(GridBagConstraints.NORTHWEST);


  /*
   Following code generated by PSTextMerge using:
 
     template:  item-panel-layout.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 

		// Panel Layout for Cost
    costLabel.setLabelFor(costJTextField);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(costLabel);
    costJTextField.setToolTipText("The cost per person to attend the event. If the event is free, then leave this field blank.");
    gb.setWidth(3);
    gb.setTopInset(4);
    gb.add(costJTextField);

		// Panel Layout for Tickets
    ticketsLabel.setLabelFor(ticketsJTextField);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(ticketsLabel);
    ticketsJTextField.setToolTipText("For purchasers, information on how they are to receive the tickets.");
    gb.setWidth(3);
    gb.setTopInset(4);
    gb.add(ticketsJTextField);

		// Panel Layout for Quantity
    quantityLabel.setLabelFor(quantityJTextField);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(quantityLabel);
    quantityJTextField.setToolTipText("Number of seats or tickets available for the event; maximum number of attendees.");
    gb.setWidth(3);
    gb.setTopInset(4);
    gb.add(quantityJTextField);

		// Panel Layout for Planned Attendance
    plannedAttendanceLabel.setLabelFor(plannedAttendanceJTextField);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(plannedAttendanceLabel);
    plannedAttendanceJTextField.setToolTipText("The number of attendees built into our planning assumptions.");
    gb.setWidth(1);
    gb.setTopInset(4);
    gb.add(plannedAttendanceJTextField);

		// Panel Layout for Actual Attendance
    actualAttendanceLabel.setLabelFor(actualAttendanceJTextField);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(actualAttendanceLabel);
    actualAttendanceJTextField.setToolTipText("The actual number of people who attended the event.");
    gb.setWidth(1);
    gb.setTopInset(4);
    gb.add(actualAttendanceJTextField);

		// Panel Layout for Planned Income
    plannedIncomeLabel.setLabelFor(plannedIncomeJTextArea);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(plannedIncomeLabel);
    plannedIncomeJTextArea.setColumns(20);
    plannedIncomeJTextArea.setLineWrap(true);
    plannedIncomeJTextArea.setRows(3);
    plannedIncomeJTextArea.setWrapStyleWord(true);
    plannedIncomeJTextArea.setToolTipText("The amount of money we have planned to receive for the event. Simple calculations are supported, such as $20 x 40.");
    plannedIncomeScrollPane.setViewportView(plannedIncomeJTextArea);
    gb.setWidth(3);
    gb.setTopInset(4);
    gb.add(plannedIncomeScrollPane);

		// Panel Layout for Actual Income
    actualIncomeLabel.setLabelFor(actualIncomeJTextArea);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(actualIncomeLabel);
    actualIncomeJTextArea.setColumns(20);
    actualIncomeJTextArea.setLineWrap(true);
    actualIncomeJTextArea.setRows(3);
    actualIncomeJTextArea.setWrapStyleWord(true);
    actualIncomeJTextArea.setToolTipText("Our actual income for the event.");
    actualIncomeScrollPane.setViewportView(actualIncomeJTextArea);
    gb.setWidth(3);
    gb.setTopInset(4);
    gb.add(actualIncomeScrollPane);

		// Panel Layout for Planned Expense
    plannedExpenseLabel.setLabelFor(plannedExpenseJTextArea);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(plannedExpenseLabel);
    plannedExpenseJTextArea.setColumns(20);
    plannedExpenseJTextArea.setLineWrap(true);
    plannedExpenseJTextArea.setRows(3);
    plannedExpenseJTextArea.setWrapStyleWord(true);
    plannedExpenseJTextArea.setToolTipText("The amount of money we have planned/budgeted to be spent on the event.");
    plannedExpenseScrollPane.setViewportView(plannedExpenseJTextArea);
    gb.setWidth(3);
    gb.setTopInset(4);
    gb.add(plannedExpenseScrollPane);

		// Panel Layout for Actual Expense
    actualExpenseLabel.setLabelFor(actualExpenseJTextArea);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(actualExpenseLabel);
    actualExpenseJTextArea.setColumns(20);
    actualExpenseJTextArea.setLineWrap(true);
    actualExpenseJTextArea.setRows(3);
    actualExpenseJTextArea.setWrapStyleWord(true);
    actualExpenseJTextArea.setToolTipText("Our actual expenses for the event.");
    actualExpenseScrollPane.setViewportView(actualExpenseJTextArea);
    gb.setWidth(3);
    gb.setTopInset(4);
    gb.add(actualExpenseScrollPane);

		// Panel Layout for Over/Under
    overUnderLabel.setLabelFor(overUnderJLabel);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(overUnderLabel);
    overUnderJLabel.setToolTipText("The difference between our actuals and our planned income or expense.");
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(overUnderJLabel);

		// Panel Layout for Finance Projection
    financeProjectionLabel.setLabelFor(financeProjectionJLabel);
    gb.setColumnWeight(0.0);
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(financeProjectionLabel);
    financeProjectionJLabel.setToolTipText("The projected impacted on our club finances, based on actuals, if available, or planned income/expense, if actuals are not yet available.");
    gb.setWidth(1);
    gb.setTopInset(8);
    gb.add(financeProjectionJLabel);

    gb.setWidth(4);
    gb.setFill(GridBagConstraints.BOTH);
    gb.setColumnWeight(1.0);
    gb.setRowWeight(1.0);
    gb.add(bottomFiller);
 
  }
 

  /*
   Following code generated by PSTextMerge using:
 
     template:  item-panel-display.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
  public void display (ClubEvent clubEvent) {
 
    modified = false;
 
    if (clubEvent.hasCost()) {
      costJTextField.setText (clubEvent.getCost().toString());
    } else {
      costJTextField.setText ("");
    }
    if (clubEvent.hasTickets()) {
      ticketsJTextField.setText (clubEvent.getTickets().toString());
    } else {
      ticketsJTextField.setText ("");
    }
    if (clubEvent.hasQuantity()) {
      quantityJTextField.setText (clubEvent.getQuantity().toString());
    } else {
      quantityJTextField.setText ("");
    }
    if (clubEvent.hasPlannedAttendance()) {
      plannedAttendanceJTextField.setText (clubEvent.getPlannedAttendance().toString());
    } else {
      plannedAttendanceJTextField.setText ("");
    }
    if (clubEvent.hasActualAttendance()) {
      actualAttendanceJTextField.setText (clubEvent.getActualAttendance().toString());
    } else {
      actualAttendanceJTextField.setText ("");
    }
    if (clubEvent.hasPlannedIncome()) {
      plannedIncomeJTextArea.setText (clubEvent.getPlannedIncome().toString());
    } else {
      plannedIncomeJTextArea.setText ("");
    }
    plannedIncomeJTextArea.setCaretPosition(0);
    if (clubEvent.hasActualIncome()) {
      actualIncomeJTextArea.setText (clubEvent.getActualIncome().toString());
    } else {
      actualIncomeJTextArea.setText ("");
    }
    actualIncomeJTextArea.setCaretPosition(0);
    if (clubEvent.hasPlannedExpense()) {
      plannedExpenseJTextArea.setText (clubEvent.getPlannedExpense().toString());
    } else {
      plannedExpenseJTextArea.setText ("");
    }
    plannedExpenseJTextArea.setCaretPosition(0);
    if (clubEvent.hasActualExpense()) {
      actualExpenseJTextArea.setText (clubEvent.getActualExpense().toString());
    } else {
      actualExpenseJTextArea.setText ("");
    }
    actualExpenseJTextArea.setCaretPosition(0);
    if (clubEvent.hasOverUnder()) {
      overUnderJLabel.setText (clubEvent.getOverUnder().toString());
    } else {
      overUnderJLabel.setText ("");
    }
    if (clubEvent.hasFinanceProjection()) {
      financeProjectionJLabel.setText (clubEvent.getFinanceProjection().toString());
    } else {
      financeProjectionJLabel.setText ("");
    }
 
  }


  /*
   Following code generated by PSTextMerge using:
 
     template:  item-panel-mod.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  public boolean modIfChanged (ClubEvent clubEvent) {
 

    if (! clubEvent.getCostAsString().equals (costJTextField.getText())) {
      clubEvent.setCost(costJTextField.getText());
      modified = true;
    }

    if (! clubEvent.getTicketsAsString().equals (ticketsJTextField.getText())) {
      clubEvent.setTickets(ticketsJTextField.getText());
      modified = true;
    }

    if (! clubEvent.getQuantityAsString().equals (quantityJTextField.getText())) {
      clubEvent.setQuantity(quantityJTextField.getText());
      modified = true;
    }

    if (! clubEvent.getPlannedAttendanceAsString().equals (plannedAttendanceJTextField.getText())) {
      clubEvent.setPlannedAttendance(plannedAttendanceJTextField.getText());
      modified = true;
    }

    if (! clubEvent.getActualAttendanceAsString().equals (actualAttendanceJTextField.getText())) {
      clubEvent.setActualAttendance(actualAttendanceJTextField.getText());
      modified = true;
    }

    if (! clubEvent.getPlannedIncomeAsString().equals (plannedIncomeJTextArea.getText())) {
      clubEvent.setPlannedIncome(plannedIncomeJTextArea.getText());
      modified = true;
    }

    if (! clubEvent.getActualIncomeAsString().equals (actualIncomeJTextArea.getText())) {
      clubEvent.setActualIncome(actualIncomeJTextArea.getText());
      modified = true;
    }

    if (! clubEvent.getPlannedExpenseAsString().equals (plannedExpenseJTextArea.getText())) {
      clubEvent.setPlannedExpense(plannedExpenseJTextArea.getText());
      modified = true;
    }

    if (! clubEvent.getActualExpenseAsString().equals (actualExpenseJTextArea.getText())) {
      clubEvent.setActualExpense(actualExpenseJTextArea.getText());
      modified = true;
    }

    if (! clubEvent.getOverUnderAsString().equals (overUnderJLabel.getText())) {
      clubEvent.setOverUnder(overUnderJLabel.getText());
      modified = true;
    }

    if (! clubEvent.getFinanceProjectionAsString().equals (financeProjectionJLabel.getText())) {
      clubEvent.setFinanceProjection(financeProjectionJLabel.getText());
      modified = true;
    }

    return modified;
 
  }


  /*
   Following code generated by PSTextMerge using:
 
     template:  item-panel-get.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 

  /**
    Returns the cost for this club event.
 
    @return The cost for this club event.
   */
  public JTextField getCostJTextField () {
    return costJTextField;
  }

  /**
    Returns the tickets for this club event.
 
    @return The tickets for this club event.
   */
  public JTextField getTicketsJTextField () {
    return ticketsJTextField;
  }

  /**
    Returns the quantity for this club event.
 
    @return The quantity for this club event.
   */
  public JTextField getQuantityJTextField () {
    return quantityJTextField;
  }

  /**
    Returns the planned attendance for this club event.
 
    @return The planned attendance for this club event.
   */
  public JTextField getPlannedAttendanceJTextField () {
    return plannedAttendanceJTextField;
  }

  /**
    Returns the actual attendance for this club event.
 
    @return The actual attendance for this club event.
   */
  public JTextField getActualAttendanceJTextField () {
    return actualAttendanceJTextField;
  }

  /**
    Returns the planned income for this club event.
 
    @return The planned income for this club event.
   */
  public JTextArea getPlannedIncomeJTextArea () {
    return plannedIncomeJTextArea;
  }

  /**
    Returns the actual income for this club event.
 
    @return The actual income for this club event.
   */
  public JTextArea getActualIncomeJTextArea () {
    return actualIncomeJTextArea;
  }

  /**
    Returns the planned expense for this club event.
 
    @return The planned expense for this club event.
   */
  public JTextArea getPlannedExpenseJTextArea () {
    return plannedExpenseJTextArea;
  }

  /**
    Returns the actual expense for this club event.
 
    @return The actual expense for this club event.
   */
  public JTextArea getActualExpenseJTextArea () {
    return actualExpenseJTextArea;
  }

  /**
    Returns the over under for this club event.
 
    @return The over under for this club event.
   */
  public JLabel getOverUnderJLabel () {
    return overUnderJLabel;
  }

  /**
    Returns the finance projection for this club event.
 
    @return The finance projection for this club event.
   */
  public JLabel getFinanceProjectionJLabel () {
    return financeProjectionJLabel;
  }


  /**
   Set a link field to a new value after it has been tweaked.
 
   This method generated by PSTextMerge using:
 
     template:  item-panel-tweak.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
 
   @param tweakedLink The link after it has been tweaked.
   @param linkID      A string identifying the link, in case there are more
                      than one. This would be the text used in the label
                      for the link.
  */
  public void setTweakedLink (String tweakedLink, String linkID) {
  }

  /**
   To be called whenever the date is modified by DatePanel.
   */
  public void dateModified (Date date) {
 
  }
 
  /**
   Does this date have an associated rule for recurrence?
   */
  public boolean canRecur() {
    return false;
	}
 
  /**
   Provide a text string describing the recurrence rule, that can
   be used as a tool tip.
   */
  public String getRecurrenceRule() {
    return "";
  }
 
  /**
   Apply the recurrence rule to the date.
 
   @param date Date that will be incremented.
   */
  public void recur (GregorianCalendar date) {
 
  }

}
