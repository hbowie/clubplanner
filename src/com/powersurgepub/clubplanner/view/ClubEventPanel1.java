package com.powersurgepub.clubplanner.view;

  import com.powersurgepub.clubplanner.*;
  import com.powersurgepub.clubplanner.model.*;
  import com.powersurgepub.psdatalib.ui.*;
  import java.awt.*;
  import javax.swing.*;
 
/**
 A panel displaying some of an item's fields, and allowing the user to modify those fields.
 
 Generated by PSTextMerge using item-panel.java.

 @author Herb Bowie
 */
public class ClubEventPanel1
		extends
			JPanel {
	

  /*
   Following code generated by PSTextMerge using:
 
     template:  item-panel-definitions.java
     data file: fields.xls
   */
 

  private JLabel    seqLabel    = new JLabel("Seq:", JLabel.LEFT);
  private JLabel seqJLabel = new JLabel();

  private JLabel    ymdLabel    = new JLabel("YMD:", JLabel.LEFT);
  private JLabel ymdJLabel = new JLabel();

  private JLabel    typeLabel    = new JLabel("Type:", JLabel.LEFT);
  private PSComboBox typePSComboBox = new PSComboBox();

  private JLabel    whatLabel    = new JLabel("What:", JLabel.LEFT);
  private JTextField whatJTextField = new JTextField();

  private JLabel    statusLabel    = new JLabel("Status:", JLabel.LEFT);
  private TextSelector statusTextSelector = new TextSelector();

  private JLabel    whenLabel    = new JLabel("When:", JLabel.LEFT);
  private JTextField whenJTextField = new JTextField();

  private JLabel    whereLabel    = new JLabel("Where:", JLabel.LEFT);
  private JTextField whereJTextField = new JTextField();

  private JLabel    whoLabel    = new JLabel("Who:", JLabel.LEFT);
  private JTextField whoJTextField = new JTextField();

  private     JLabel              bottomFiller   = new JLabel("");

  private     boolean             modified = false;

	private     GridBagger          gb = new GridBagger();

  /**
   A constructor without any arguments.
   */
  public ClubEventPanel1() {
 
    gb.startLayout (this, 2, 99);
    gb.setByRows(true);
		gb.setDefaultColumnWeight (0.5);
		gb.setDefaultRowWeight (0.0);
		gb.setAllInsets (4);
    gb.setFill(GridBagConstraints.HORIZONTAL);
    gb.setAnchor(GridBagConstraints.WEST);


  /*
   Following code generated by PSTextMerge using:
 
     template:  item-panel-layout.java
     data file: fields.xls
   */
 
    seqLabel.setLabelFor(seqJLabel);
    gb.setColumnWeight(0.0);
    seqJLabel.setToolTipText("The sequence of discussion at a Board meeting.");
    gb.add(seqLabel);
    gb.add(seqJLabel);
    ymdLabel.setLabelFor(ymdJLabel);
    gb.setColumnWeight(0.0);
    ymdJLabel.setToolTipText("A full or partial date in year, month, day sequence.");
    gb.add(ymdLabel);
    gb.add(ymdJLabel);
    typeLabel.setLabelFor(typePSComboBox);
    typePSComboBox.load (ClubPlanner.class, "type.txt");
    gb.setColumnWeight(0.0);
    gb.add(typeLabel);
    typePSComboBox.setToolTipText("The category assigned to the event.");
    gb.add(typePSComboBox);
    whatLabel.setLabelFor(whatJTextField);
    gb.setColumnWeight(0.0);
    gb.add(whatLabel);
    whatJTextField.setToolTipText("A brief descriptive title for the event.");
    gb.add(whatJTextField);
    statusLabel.setLabelFor(statusTextSelector);
    gb.setColumnWeight(0.0);
    gb.add(statusLabel);
    statusTextSelector.setToolTipText("One or more tags indicating the status of the event.");
    gb.add(statusTextSelector);
    whenLabel.setLabelFor(whenJTextField);
    gb.setColumnWeight(0.0);
    gb.add(whenLabel);
    whenJTextField.setToolTipText("An indication of the date and time that the event will be held, in a format emphasizing human readability, such as Fri Aug 10 7:00 PM - 10:00.");
    gb.add(whenJTextField);
    whereLabel.setLabelFor(whereJTextField);
    gb.setColumnWeight(0.0);
    gb.add(whereLabel);
    whereJTextField.setToolTipText("The location of the event, including the name of the venue and its address.");
    gb.add(whereJTextField);
    whoLabel.setLabelFor(whoJTextField);
    gb.setColumnWeight(0.0);
    gb.add(whoLabel);
    whoJTextField.setToolTipText("Who is assigned to plan, coordinate and host the event. Can include multiple names. Can include email addresses and phone numbers.");
    gb.add(whoJTextField);

    gb.setWidth(2);
    gb.setFill(GridBagConstraints.BOTH);
    gb.setColumnWeight(1.0);
    gb.setRowWeight(1.0);
    gb.add(bottomFiller);
 
  }
 

  /*
   Following code generated by PSTextMerge using:
 
     template:  item-panel-display.java
     data file: fields.xls
   */
  public void display (ClubEvent clubEvent) {
 
    modified = false;
 
    if (clubEvent.hasSeq()) {
      seqJLabel.setText (clubEvent.getSeq().toString());
    } else {
      seqJLabel.setText ("");
    }
    if (clubEvent.hasYmd()) {
      ymdJLabel.setText (clubEvent.getYmd().toString());
    } else {
      ymdJLabel.setText ("");
    }
    if (clubEvent.hasType()) {
      typePSComboBox.setText (clubEvent.getType().toString());
    } else {
      typePSComboBox.setText ("");
    }
    if (clubEvent.hasWhat()) {
      whatJTextField.setText (clubEvent.getWhat().toString());
    } else {
      whatJTextField.setText ("");
    }
    if (clubEvent.hasStatus()) {
      statusTextSelector.setText (clubEvent.getStatus().toString());
    } else {
      statusTextSelector.setText ("");
    }
    if (clubEvent.hasWhen()) {
      whenJTextField.setText (clubEvent.getWhen().toString());
    } else {
      whenJTextField.setText ("");
    }
    if (clubEvent.hasWhere()) {
      whereJTextField.setText (clubEvent.getWhere().toString());
    } else {
      whereJTextField.setText ("");
    }
    if (clubEvent.hasWho()) {
      whoJTextField.setText (clubEvent.getWho().toString());
    } else {
      whoJTextField.setText ("");
    }
 
  }


  /*
   Following code generated by PSTextMerge using:
 
     template:  item-panel-mod.java
     data file: fields.xls
   */
 
  public boolean modIfChanged (ClubEvent clubEvent) {
 
    if (! clubEvent.getSeqAsString().equals (seqJLabel.getText())) {
      clubEvent.setSeq(seqJLabel.getText());
      modified = true;
    }
    if (! clubEvent.getYmdAsString().equals (ymdJLabel.getText())) {
      clubEvent.setYmd(ymdJLabel.getText());
      modified = true;
    }
    if (! clubEvent.getTypeAsString().equals (typePSComboBox.getText())) {
      clubEvent.setType(typePSComboBox.getText());
      modified = true;
    }
    if (! clubEvent.getWhatAsString().equals (whatJTextField.getText())) {
      clubEvent.setWhat(whatJTextField.getText());
      modified = true;
    }
    if (! clubEvent.getStatusAsString().equals (statusTextSelector.getText())) {
      clubEvent.setStatus(statusTextSelector.getText());
      modified = true;
    }
    if (! clubEvent.getWhenAsString().equals (whenJTextField.getText())) {
      clubEvent.setWhen(whenJTextField.getText());
      modified = true;
    }
    if (! clubEvent.getWhereAsString().equals (whereJTextField.getText())) {
      clubEvent.setWhere(whereJTextField.getText());
      modified = true;
    }
    if (! clubEvent.getWhoAsString().equals (whoJTextField.getText())) {
      clubEvent.setWho(whoJTextField.getText());
      modified = true;
    }

    return modified;
 
  }


  /*
   Following code generated by PSTextMerge using:
 
     template:  item-panel-get.java
     data file: fields.xls
   */
 

  /**
    Returns the seq for this club event.
 
    @return The seq for this club event.
   */
  public JLabel getSeqJLabel () {
    return seqJLabel;
  }

  /**
    Returns the ymd for this club event.
 
    @return The ymd for this club event.
   */
  public JLabel getYmdJLabel () {
    return ymdJLabel;
  }

  /**
    Returns the type for this club event.
 
    @return The type for this club event.
   */
  public PSComboBox getTypePSComboBox () {
    return typePSComboBox;
  }

  /**
    Returns the what for this club event.
 
    @return The what for this club event.
   */
  public JTextField getWhatJTextField () {
    return whatJTextField;
  }

  /**
    Returns the status for this club event.
 
    @return The status for this club event.
   */
  public TextSelector getStatusTextSelector () {
    return statusTextSelector;
  }

  /**
    Returns the when for this club event.
 
    @return The when for this club event.
   */
  public JTextField getWhenJTextField () {
    return whenJTextField;
  }

  /**
    Returns the where for this club event.
 
    @return The where for this club event.
   */
  public JTextField getWhereJTextField () {
    return whereJTextField;
  }

  /**
    Returns the who for this club event.
 
    @return The who for this club event.
   */
  public JTextField getWhoJTextField () {
    return whoJTextField;
  }

}
